<?php

function sampleApi_menu(){
    $items = array();
    $items['sampleApis/test'] = array(
        'title' => 'Test',
        'description' => 'Test',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sampleApi_main_form'),
        'file' => 'resource/fields_resource.inc',
        'access callback' => TRUE,
    );
    $items['admin/config/custom/sampleapi'] = array(
        'title' => 'Sample API',
        'description' => 'Configure sampleApi module',
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sampleApi_config_form'),
        'access arguments' => array('administer site configuration'),   
        'file' => 'sampleApi.admin.inc',
      );

    return $items;
}

/*function sampleApi_services_resources(){
    $config_variables = variable_get('sampleapi_config_variables', array());
    $prefix = $config_variables['endpoint_prefix'];
    if(!isset($prefix)){
        drupal_set_message('Prefix is not provided');
        return $my_services;
    }
    
    $my_services = array();
    $my_services[$prefix . '-node'] = array(
        'retrieve' => array(
            'help' => t('Retrieve node using nid'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/structure_resource'),
            'callback' => '_sampleApi_node_retrieve',
            'access callback' => '_ngo_service_access',
            'args' => array(
                array(
                    'name' => 'nid',
                    'type' => 'int',
                    'description' => 'Node nid',
                    'source' => array('path' => 0),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => t('Create New Content Type'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/structure_resource'),
            'callback' => '_sampleApi_node_create',
            // 'access callback' => '_ngo_service_access',
            'access arguments' => array('content type resrource create'),
            'access arguments append' => FALSE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The Node object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
    );
    $my_services[$prefix . '-taxonomy_term'] = array(
        'retrieve' => array(
            'help' => t('Retrieve Taxonomy Term using tid'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/structure_resource'),
            'callback' => '_sampleApi_taxonomy_term_retrieve',
            'access callback' => '_ngo_service_access',
            'args' => array(
                array(
                    'name' => 'tid',
                    'type' => 'int',
                    'description' => 'Term tid',
                    'source' => array('path' => 0),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => t('Create New Taxonomy Term'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/structure_resource'),
            'callback' => '_sampleApi_taxonomy_term_create',
            // 'access callback' => '_ngo_service_access',
            'access arguments' => array('taxonomy_term resrource create'),
            'access arguments append' => FALSE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The Taxonomy Term object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
    );
    $my_services[$prefix . '-taxonomy_vocabulary'] = array(
        'retrieve' => array(
            'help' => t('Retrieve Taxonomy Vocabulary using tid'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/structure_resource'),
            'callback' => '_sampleApi_taxonomy_vocabulary_retrieve',
            'access callback' => '_ngo_service_access',
            'args' => array(
                array(
                    'name' => 'vocabulary_machine_name',
                    'type' => 'string',
                    'description' => 'Vocabulary Machine Name',
                    'source' => array('path' => 0),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => t('Create New Taxonomy Vocabulary'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/structure_resource'),
            'callback' => '_sampleApi_taxonomy_vocabulary_create',
            // 'access callback' => '_ngo_service_access',
            'access arguments' => array('taxonomy_vocabulary resrource create'),
            'access arguments append' => FALSE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The Taxonomy Vocabulary object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
    );
    $my_services[$prefix . '-field_collection_item'] = array(
        'retrieve' => array(
            'help' => t('Retrieve Field Collection using term_id'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/structure_resource'),
            'callback' => '_sampleApi_field_collection_retrieve',
            'access callback' => '_ngo_service_access',
            'args' => array(
                array(
                    'name' => 'term_id',
                    'type' => 'int',
                    'description' => 'Field collection term id',
                    'source' => array('path' => 0),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => t('Create New Field Collection Item'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/structure_resource'),
            'callback' => '_sampleApi_field_collection_create',
            // 'access callback' => '_ngo_service_access',
            'access arguments' => array('field_collection_item resrource create'),
            'access arguments append' => FALSE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The Field Collection Item object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
    );
    $my_services[$prefix . '-allfields'] = array(
        'index' => array(
            'help' => t('Fetch all fields'),
            'file' => array('type' => 'inc', 'module' => 'sampleApi', 'name' => 'resource/fields_resource'),
            'callback' => '_sampleApi_all_fields',
            'access callback' => '_ngo_service_access',
        ),
    );
    // return $my_services;
}
function sampleApi_url_inbound_alter(&$path, $original_path, $path_language){
    $prefix = variable_get('sampleapi_config_variables', array())['endpoint_prefix'];
    $path = preg_replace('/sampleapi\/' . $prefix . '\//', 'sampleapi/' . $prefix . '-', $path);
}*/

function _ngo_service_access(){
    return TRUE;
}

function sampleApi_services_resources_alter(&$resources, &$endpoint){
    $temp_resources = array('node','taxonomy_term', 'taxonomy_vocabulary');
    foreach($temp_resources as $temp_resource){
        $resources[$temp_resource]['operations']['retrieve']['file']['module'] = 'sampleApi';
        $resources[$temp_resource]['operations']['retrieve']['file']['name'] = 'resource/structure_resource';
        $resources[$temp_resource]['operations']['retrieve']['callback'] = '_sampleApi_' . $temp_resource . '_retrieve';

        $resources[$temp_resource]['operations']['create']['file']['module'] = 'sampleApi';
        $resources[$temp_resource]['operations']['create']['file']['name'] = 'resource/structure_resource';
        $resources[$temp_resource]['operations']['create']['callback'] = '_sampleApi_' . $temp_resource . '_create';
    }
}